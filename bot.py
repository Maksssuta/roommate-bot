import sqlite3
import os
import asyncio
import logging
from collections import defaultdict

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)

API_TOKEN = "8250866605:AAGKcaplvHLEW9BH7efSbbn2hSTN1K7TFZg"

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==================
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
DB_PATH = os.getenv("DB_PATH", "roommates.db")
os.makedirs(os.path.dirname(DB_PATH) or ".", exist_ok=True)

conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER UNIQUE,
    first_name TEXT,
    last_name TEXT,
    role TEXT,
    user_photo TEXT,
    about TEXT,
    apartment_photo TEXT,
    apartment_desc TEXT,
    price INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS likes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    from_user INTEGER,
    to_user INTEGER,
    UNIQUE(from_user, to_user)
)
""")
conn.commit()

# ================== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==================
class Form(StatesGroup):
    waiting_for_role = State()
    waiting_for_user_photo = State()
    waiting_for_about = State()
    waiting_for_apartment_photo = State()
    waiting_for_apartment_desc = State()
    waiting_for_price = State()

# ================== –ö–ê–†–£–°–ï–õ–¨ ==================
user_search_index = defaultdict(int)

async def send_next_profile(chat_id: int, user_id: int):
    cursor.execute("SELECT role FROM users WHERE telegram_id=?", (user_id,))
    row = cursor.fetchone()
    if not row:
        await bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start")
        return

    role = row[0]
    if role == "roommate":
        cursor.execute("SELECT telegram_id, first_name, last_name, user_photo, about FROM users WHERE role='seeker' AND telegram_id != ? ORDER BY id", (user_id,))
    else:
        cursor.execute("SELECT telegram_id, first_name, last_name, user_photo, apartment_photo, apartment_desc, price FROM users WHERE role='roommate' AND telegram_id != ? ORDER BY id", (user_id,))

    matches = cursor.fetchall()
    if not matches:
        await bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç üòî")
        return

    index = user_search_index[user_id]
    if index >= len(matches):
        await bot.send_message(chat_id, "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòî")
        user_search_index[user_id] = 0
        return

    match = matches[index]

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω", callback_data=f"like_{match[0]}")],
        [types.InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{match[0]}")]
    ])

    if role == "roommate":
        text = f"üë§ {match[1]} {match[2]}\n{match[4]}"
        await bot.send_photo(chat_id, photo=match[3], caption=text, reply_markup=kb)
    else:
        text = f"üë§ {match[1]} {match[2]}\n–û –∫–≤–∞—Ä—Ç–∏—Ä–µ:\n{match[5]}\n–¶–µ–Ω–∞: {match[6]}"
        await bot.send_media_group(
            chat_id,
            media=[
                types.InputMediaPhoto(match[3], caption="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                types.InputMediaPhoto(match[4], caption=text)
            ]
        )
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================

# /start
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò—â—É —Å–æ—Å–µ–¥–∞ –¥–ª—è –ø–æ–¥—Å–µ–ª–µ–Ω–∏—è", callback_data="role_roommate")],
        [types.InlineKeyboardButton(text="–ò—â—É –∂–∏–ª—å—ë –∏ —Å–æ–∂–∏—Ç–µ–ª—è", callback_data="role_seeker")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üè† –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–µ–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è?", reply_markup=kb)
    await Form.waiting_for_role.set()

# –í—ã–±–æ—Ä —Ä–æ–ª–∏
@dp.callback_query(lambda c: c.data.startswith("role"))
async def process_role(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    await state.update_data(role=role)

    cursor.execute("INSERT OR IGNORE INTO users (telegram_id, first_name, last_name, role) VALUES (?, ?, ?, ?)",
                   (callback.from_user.id, callback.from_user.first_name, callback.from_user.last_name, role))
    conn.commit()

    await bot.send_message(callback.from_user.id, "–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë —Ñ–æ—Ç–æ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–µ).")
    await Form.waiting_for_user_photo.set()
    await callback.answer()

# –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.photo, state=Form.waiting_for_user_photo)
async def user_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(user_photo=photo_id)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ\n–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.")
    await Form.waiting_for_about.set()

# –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@dp.message(state=Form.waiting_for_about)
async def about(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    data = await state.get_data()
    if data['role'] == "roommate":
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã.")
        await Form.waiting_for_apartment_photo.set()
    else:
        cursor.execute("""
            UPDATE users SET user_photo=?, about=? WHERE telegram_id=?
        """, (data['user_photo'], data['about'], message.from_user.id))
        conn.commit()
        await message.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π /search")
        await state.clear()

# –§–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@dp.message(lambda message: message.photo, state=Form.waiting_for_apartment_photo)
async def apartment_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(apartment_photo=photo_id)
    await message.answer("–§–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–û–ø–∏—à–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É (—Ä–∞–π–æ–Ω, —É—Å–ª–æ–≤–∏—è –∏ —Ç.–¥.).")
    await Form.waiting_for_apartment_desc.set()

# –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@dp.message(state=Form.waiting_for_apartment_desc)
async def apartment_desc(message: Message, state: FSMContext):
    await state.update_data(apartment_desc=message.text)
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã (—á–∏—Å–ª–æ–º).")
    await Form.waiting_for_price.set()

# –¶–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@dp.message(state=Form.waiting_for_price)
async def price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º.")
        return
    price = int(message.text)
    await state.update_data(price=price)

    data = await state.get_data()
    cursor.execute("""
        UPDATE users SET user_photo=?, about=?, apartment_photo=?, apartment_desc=?, price=? WHERE telegram_id=?
    """, (data['user_photo'], data['about'], data['apartment_photo'], data['apartment_desc'], data['price'], message.from_user.id))
    conn.commit()

    await message.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—Ü–æ–≤.")
    await state.clear()

# /search
@dp.message(Command("search"))
async def search(message: Message):
    user_search_index[message.from_user.id] = 0
    await send_next_profile(message.chat.id, message.from_user.id)

# –õ–∞–π–∫–∏ –∏ –ø—Ä–æ–ø—É—Å–∫
@dp.callback_query(lambda c: c.data.startswith(("like", "skip")))
async def process_like(callback: CallbackQuery):
    action, target_id = callback.data.split("_")
    target_id = int(target_id)

    if action == "like":
        cursor.execute("INSERT OR IGNORE INTO likes (from_user, to_user) VALUES (?, ?)", (callback.from_user.id, target_id))
        conn.commit()
        cursor.execute("SELECT 1 FROM likes WHERE from_user=? AND to_user=?", (target_id, callback.from_user.id))
        mutual = cursor.fetchone()
        if mutual:
            cursor.execute("SELECT first_name, last_name FROM users WHERE telegram_id=?", (target_id,))
            target_data = cursor.fetchone()
            cursor.execute("SELECT first_name, last_name FROM users WHERE telegram_id=?", (callback.from_user.id,))
            user_data = cursor.fetchone()

            await bot.send_message(callback.from_user.id,
                                   f"üéâ –í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! tg://user?id={target_id}\nüë§ {target_data[0]} {target_data[1]}")
            await bot.send_message(target_id,
                                   f"üéâ –í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! tg://user?id={callback.from_user.id}\nüë§ {user_data[0]} {user_data[1]}")
        else:
            await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å ‚úÖ")
    else:
        await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ ‚ùå")

    user_search_index[callback.from_user.id] += 1
    await send_next_profile(callback.from_user.id, callback.from_user.id)

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    logging.info("–£–¥–∞–ª—è–µ–º webhook –∏ pending updates...")
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–°—Ç–∞—Ä—Ç—É–µ–º polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

