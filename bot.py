# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ —Å FSM –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# ================== –ü–û–ò–°–ö –° –ö–ê–†–£–°–ï–õ–¨–Æ ==================
from collections import defaultdict

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_index = defaultdict(int)

async def send_next_profile(chat_id: int, user_id: int):
    cursor.execute("SELECT role FROM users WHERE telegram_id=?", (user_id,))
    row = cursor.fetchone()
    if not row:
        await bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start")
        return

    role = row[0]
    if role == "roommate":
        cursor.execute("SELECT telegram_id, first_name, last_name, user_photo, about FROM users WHERE role='seeker' AND telegram_id != ? ORDER BY id", (user_id,))
    else:
        cursor.execute("SELECT telegram_id, first_name, last_name, user_photo, apartment_photo, apartment_desc, price FROM users WHERE role='roommate' AND telegram_id != ? ORDER BY id", (user_id,))

    matches = cursor.fetchall()
    if not matches:
        await bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç üòî")
        return

    index = user_search_index[user_id]
    if index >= len(matches):
        await bot.send_message(chat_id, "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòî")
        user_search_index[user_id] = 0
        return

    match = matches[index]

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω", callback_data=f"like_{match[0]}")],
        [types.InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{match[0]}")]
    ])

    if role == "roommate":
        text = f"üë§ {match[1]} {match[2]}\n{match[4]}"
        await bot.send_photo(chat_id, photo=match[3], caption=text, reply_markup=kb)
    else:
        text = f"üë§ {match[1]} {match[2]}\n–û –∫–≤–∞—Ä—Ç–∏—Ä–µ:\n{match[5]}\n–¶–µ–Ω–∞: {match[6]}"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –∫–≤–∞—Ä—Ç–∏—Ä—ã
        await bot.send_media_group(
            chat_id,
            media=[
                types.InputMediaPhoto(match[3], caption="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                types.InputMediaPhoto(match[4], caption=text)
            ]
        )
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.message(Command("search"))
async def search(message: Message):
    user_search_index[message.from_user.id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∞–Ω–∫–µ—Ç—ã
    await send_next_profile(message.chat.id, message.from_user.id)

# ================== –õ–ê–ô–ö–ò –° –ü–ï–†–ï–•–û–î–û–ú –ö –°–õ–ï–î–£–Æ–©–ï–ô –ê–ù–ö–ï–¢–ï ==================
@dp.callback_query(lambda c: c.data.startswith(("like", "skip")))
async def process_like(callback: CallbackQuery):
    action, target_id = callback.data.split("_")
    target_id = int(target_id)

    if action == "like":
        cursor.execute("INSERT OR IGNORE INTO likes (from_user, to_user) VALUES (?, ?)", (callback.from_user.id, target_id))
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        cursor.execute("SELECT 1 FROM likes WHERE from_user=? AND to_user=?", (target_id, callback.from_user.id))
        mutual = cursor.fetchone()

        if mutual:
            cursor.execute("SELECT first_name, last_name FROM users WHERE telegram_id=?", (target_id,))
            target_data = cursor.fetchone()
            cursor.execute("SELECT first_name, last_name FROM users WHERE telegram_id=?", (callback.from_user.id,))
            user_data = cursor.fetchone()

            await bot.send_message(callback.from_user.id,
                                   f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: tg://user?id={target_id}\nüë§ {target_data[0]} {target_data[1]}")
            await bot.send_message(target_id,
                                   f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: tg://user?id={callback.from_user.id}\nüë§ {user_data[0]} {user_data[1]}")
        else:
            await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å ‚úÖ")
    else:
        await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ ‚ùå")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ
    user_search_index[callback.from_user.id] += 1
    await send_next_profile(callback.from_user.id, callback.from_user.id)

