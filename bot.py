import sqlite3
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

API_TOKEN = "7993633698:AAGyhYZonytprP2UypN__galoGDgi2TvlBw"  # –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
DB_PATH = os.getenv("DB_PATH", "roommates.db")
os.makedirs(os.path.dirname(DB_PATH) or ".", exist_ok=True)

conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    telegram_id INTEGER UNIQUE,
    first_name TEXT,
    last_name TEXT,
    role TEXT,
    apartment_desc TEXT,
    price INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS likes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    from_user INTEGER,
    to_user INTEGER,
    UNIQUE(from_user, to_user)
)
""")

conn.commit()

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================

@dp.message(Command("start"))
async def start(message: Message):
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id, first_name, last_name) VALUES (?, ?, ?)",
                   (message.from_user.id, message.from_user.first_name, message.from_user.last_name))
    conn.commit()

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ò—â—É —Å–æ—Å–µ–¥–∞ –¥–ª—è –ø–æ–¥—Å–µ–ª–µ–Ω–∏—è", callback_data="role_roommate")],
        [types.InlineKeyboardButton(text="–ò—â—É –∂–∏–ª—å—ë –∏ —Å–æ–∂–∏—Ç–µ–ª—è", callback_data="role_seeker")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üè† –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–µ–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è?", reply_markup=kb)


@dp.callback_query(lambda c: c.data.startswith("role"))
async def process_role(callback: CallbackQuery):
    role = callback.data.split("_")[1]
    cursor.execute("UPDATE users SET role=? WHERE telegram_id=?", (role, callback.from_user.id))
    conn.commit()

    if role == "roommate":
        await bot.send_message(callback.from_user.id, "–û–ø–∏—à–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É (—Ä–∞–π–æ–Ω, —É—Å–ª–æ–≤–∏—è, —Å—Ç–æ–∏–º–æ—Å—Ç—å)")
    else:
        await bot.send_message(callback.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –≥–¥–µ –∏—â—É—Ç —Å–æ—Å–µ–¥–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π /search")

    await callback.answer()


@dp.message()
async def save_apartment_desc(message: Message):
    cursor.execute("SELECT role FROM users WHERE telegram_id=?", (message.from_user.id,))
    row = cursor.fetchone()
    if row and row[0] == "roommate":
        cursor.execute("UPDATE users SET apartment_desc=? WHERE telegram_id=?", (message.text, message.from_user.id))
        conn.commit()
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∂–∏–ª—å—Ü–∞")


@dp.message(Command("search"))
async def search(message: Message):
    cursor.execute("SELECT role FROM users WHERE telegram_id=?", (message.from_user.id,))
    row = cursor.fetchone()
    if not row:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start")
        return

    role = row[0]
    if role == "roommate":
        cursor.execute("SELECT telegram_id, first_name, last_name FROM users WHERE role='seeker' AND telegram_id != ? LIMIT 1", (message.from_user.id,))
    else:
        cursor.execute("SELECT telegram_id, first_name, last_name, apartment_desc FROM users WHERE role='roommate' AND telegram_id != ? LIMIT 1", (message.from_user.id,))

    match = cursor.fetchone()
    if not match:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç üòî")
        return

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω", callback_data=f"like_{match[0]}")],
        [types.InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{match[0]}")]
    ])

    if role == "roommate":
        text = f"üë§ {match[1]} {match[2]}\n–ò—â–µ—Ç –∂–∏–ª—å—ë –∏ —Å–æ–∂–∏—Ç–µ–ª—è"
    else:
        text = f"üë§ {match[1]} {match[2]}\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—É:\n{match[3]}"

    await message.answer(text, reply_markup=kb)


@dp.callback_query(lambda c: c.data.startswith(("like", "skip")))
async def process_like(callback: CallbackQuery):
    action, target_id = callback.data.split("_")
    target_id = int(target_id)

    if action == "like":
        cursor.execute("INSERT OR IGNORE INTO likes (from_user, to_user) VALUES (?, ?)", (callback.from_user.id, target_id))
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        cursor.execute("SELECT 1 FROM likes WHERE from_user=? AND to_user=?", (target_id, callback.from_user.id))
        mutual = cursor.fetchone()

        if mutual:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT first_name, last_name FROM users WHERE telegram_id=?", (target_id,))
            target_data = cursor.fetchone()

            cursor.execute("SELECT first_name, last_name FROM users WHERE telegram_id=?", (callback.from_user.id,))
            user_data = cursor.fetchone()

            await bot.send_message(callback.from_user.id,
                                   f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: tg://user?id={target_id}\nüë§ {target_data[0]} {target_data[1]}")
            await bot.send_message(target_id,
                                   f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: tg://user?id={callback.from_user.id}\nüë§ {user_data[0]} {user_data[1]}")
        else:
            await callback.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å ‚úÖ")
    else:
        await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ ‚ùå")

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
